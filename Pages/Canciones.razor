@page "/Canciones"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager

<h3>Agregar Canciones</h3>

<EditForm Model="@cancion">
    <div class="form-group">
        <label for="Nombre">Nombre de la Canción</label>
        <InputText id="Nombre" @bind-Value="cancion.Nombre" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Artista">Artista</label>
        <select id="Artista" @bind="cancion.Artista" class="form-control">
            <option value="">Seleccionar Artista</option>
            @foreach (var artista in artistas)
            {
                <option value="@artista.Nombre">@artista.Nombre</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="TiempoDuracion">Tiempo de Duración (minutos)</label>
        <InputText id="TiempoDuracion" @bind-Value="cancion.TiempoDuracion" class="form-control" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary" @onclick="@Guardar">Guardar</button>
    </div>
</EditForm>

@if (canciones != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Artista</th>
                <th>TiempoDuracion</th>
                <th>Eliminar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cancion in canciones)
            {
                <tr>
                    <td>@cancion.Nombre</td>
                    <td>@cancion.Artista</td>
                    <td>@cancion.TiempoDuracion</td>
                    <td>
                        <button class="btn btn-warning" @onclick="@(() => NavigationManager.NavigateTo($"/Canciones-editar/{cancion.Nombre}"))">Editar</button>
                    </td>
                    <td><button class="btn btn-danger" @onclick="@(() => BorrarCancion(cancion.Nombre))">Eliminar</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Cancion cancion = new Cancion();
    private List<Cancion> canciones = new List<Cancion>();
    private List<Artista> artistas = new List<Artista>();

    protected async Task Guardar()
    {
        canciones.Add(new Cancion { Nombre = cancion.Nombre, Artista = cancion.Artista, TiempoDuracion = cancion.TiempoDuracion });
        await localStorage.SetItemAsync("canciones", canciones);
        cancion = new Cancion();
    }

    protected override async Task OnInitializedAsync()
    {
        canciones = await localStorage.GetItemAsync<List<Cancion>>("canciones");
        artistas = await localStorage.GetItemAsync<List<Artista>>("artistas");
        if (canciones == null) canciones = new List<Cancion>();
        if (artistas == null) artistas = new List<Artista>();
    }

    protected async Task BorrarCancion(string nombreCancion)
    {
        canciones.Remove(canciones.Find(c => c.Nombre == nombreCancion));
        await localStorage.SetItemAsync("canciones", canciones);
    }
}